# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import inference_pb2 as inference__pb2


class InferenceServerStub(object):
    """The inference service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.initialize = channel.unary_unary(
                '/InferenceServer/initialize',
                request_serializer=inference__pb2.InitializeRequest.SerializeToString,
                response_deserializer=inference__pb2.InitializeReply.FromString,
                )
        self.add_document = channel.stream_unary(
                '/InferenceServer/add_document',
                request_serializer=inference__pb2.UploadFileRequest.SerializeToString,
                response_deserializer=inference__pb2.StringResponse.FromString,
                )
        self.query_document = channel.stream_unary(
                '/InferenceServer/query_document',
                request_serializer=inference__pb2.QueryRequest.SerializeToString,
                response_deserializer=inference__pb2.StringResponse.FromString,
                )
        self.query_text = channel.unary_unary(
                '/InferenceServer/query_text',
                request_serializer=inference__pb2.QueryTextRequest.SerializeToString,
                response_deserializer=inference__pb2.StringResponse.FromString,
                )


class InferenceServerServicer(object):
    """The inference service definition.
    """

    def initialize(self, request, context):
        """Sends an inference reply
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def add_document(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def query_document(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def query_text(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InferenceServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'initialize': grpc.unary_unary_rpc_method_handler(
                    servicer.initialize,
                    request_deserializer=inference__pb2.InitializeRequest.FromString,
                    response_serializer=inference__pb2.InitializeReply.SerializeToString,
            ),
            'add_document': grpc.stream_unary_rpc_method_handler(
                    servicer.add_document,
                    request_deserializer=inference__pb2.UploadFileRequest.FromString,
                    response_serializer=inference__pb2.StringResponse.SerializeToString,
            ),
            'query_document': grpc.stream_unary_rpc_method_handler(
                    servicer.query_document,
                    request_deserializer=inference__pb2.QueryRequest.FromString,
                    response_serializer=inference__pb2.StringResponse.SerializeToString,
            ),
            'query_text': grpc.unary_unary_rpc_method_handler(
                    servicer.query_text,
                    request_deserializer=inference__pb2.QueryTextRequest.FromString,
                    response_serializer=inference__pb2.StringResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'InferenceServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class InferenceServer(object):
    """The inference service definition.
    """

    @staticmethod
    def initialize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/InferenceServer/initialize',
            inference__pb2.InitializeRequest.SerializeToString,
            inference__pb2.InitializeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def add_document(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/InferenceServer/add_document',
            inference__pb2.UploadFileRequest.SerializeToString,
            inference__pb2.StringResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def query_document(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/InferenceServer/query_document',
            inference__pb2.QueryRequest.SerializeToString,
            inference__pb2.StringResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def query_text(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/InferenceServer/query_text',
            inference__pb2.QueryTextRequest.SerializeToString,
            inference__pb2.StringResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
